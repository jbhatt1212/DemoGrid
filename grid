package amplify.call.adapters

import amplify.call.R
import amplify.call.databinding.RowChatConversationBinding
import amplify.call.models.responses.ChatConversation
import amplify.call.models.responses.MessageLog
import amplify.call.models.viewmodels.ChatViewModel
import amplify.call.utils.Logger
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide

class ChatConversationAdapter(
    private val onImagePreview: (ChatConversation) -> Unit,
    private val onCopyMessage: (ChatConversation) -> Unit,
    private val onMessageSelected: () -> Unit
) : RecyclerView.Adapter<ChatConversationAdapter.ChatConversationViewHolder>() {
    private var selectedPosition: Int = -1

    /*region Variable Declaration*/
    private val TAG = ChatConversationAdapter::class.java.simpleName
    private var chatConversation: List<ChatConversation> = emptyList()
    private var deletedIds = emptySet<Int>()

    /*endregion*/

    inner class ChatConversationViewHolder(val binding: RowChatConversationBinding) :
        RecyclerView.ViewHolder(binding.root)

    override fun onCreateViewHolder(
        parent: ViewGroup,
        viewType: Int
    ): ChatConversationViewHolder {
        val binding = RowChatConversationBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return ChatConversationViewHolder(binding)
    }

    override fun onBindViewHolder(
        holder: ChatConversationViewHolder,
        position: Int
    ) {
        val chat = chatConversation[position]
        Logger.e(TAG, "chat.smsType model $position ==>  ${chat.msgBody}")
        if (chat.smsType.equals("receive", true)) {
            holder.binding.clChatReceive.visibility = View.VISIBLE
            holder.binding.clChatSent.visibility = View.GONE
            if (chat.messageType.equals("SMS", true) && !chat.msgBody.isNullOrEmpty()) {
                holder.binding.tvChatReceive.visibility = View.VISIBLE
                holder.binding.ivImageReceive.visibility = View.GONE
                holder.binding.tvChatReceive.text = chat.msgBody.toString().trim()
            } else if (chat.messageType.equals("MMS", true) && !chat.msgBody.isNullOrEmpty()) {
                holder.binding.tvChatReceive.visibility = View.GONE
                holder.binding.ivImageReceive.visibility = View.VISIBLE
                Glide
                    .with(holder.binding.ivImageReceive.context)
                    .load(chat.msgBody)
                    .placeholder(R.drawable.ic_placeholder_image)
                    .error(R.drawable.ic_placeholder_image)
                    .into(holder.binding.ivImageReceive)
            }
        } else {
            holder.binding.clChatReceive.visibility = View.GONE
            holder.binding.clChatSent.visibility = View.VISIBLE
            if (chat.messageType.equals("SMS", true) && !chat.msgBody.isNullOrEmpty()) {
                holder.binding.tvChatSent.visibility = View.VISIBLE
                holder.binding.ivImageSent.visibility = View.GONE
                Logger.e(
                    TAG,
                    "chat.msgBody before $position ==>  ${chat.msgBody.toString().trim()}"
                )
                holder.binding.tvChatSent.text = chat.msgBody.toString().trim()
                Logger.e(TAG, "chat.msgBody after $position ==>  ${holder.binding.tvChatSent.text}")
            } else if (chat.messageType.equals("MMS", true) && !chat.msgBody.isNullOrEmpty()) {
                holder.binding.tvChatSent.visibility = View.GONE
                holder.binding.ivImageSent.visibility = View.VISIBLE
                Glide
                    .with(holder.binding.ivImageSent.context)
                    .load(chat.msgBody)
                    .placeholder(R.drawable.ic_placeholder_image)
                    .error(R.drawable.ic_placeholder_image)
                    .into(holder.binding.ivImageSent)
            }
        }
        val isSelected = position == selectedPosition
        holder.binding.root.setBackgroundColor(
            if (isSelected)
                holder.binding.root.context.getColor(R.color.clr_chat_selected_bg)
            else
                holder.binding.root.context.getColor(R.color.clr_screen_bg)
        )
        holder.binding.ivImageSent.setOnClickListener {
            if (!chat.messageType.equals("SMS", true)) {
                onImagePreview.invoke(chat)
            }
        }

        holder.binding.ivImageReceive.setOnClickListener {
            if (!chat.messageType.equals("SMS", true)) {
                onImagePreview.invoke(chat)
            }
        }

        holder.binding.ivImageSent.setOnLongClickListener{
            if (!chat.messageType.equals("SMS", true)) {
                setSelectedItem(position)
                onMessageSelected.invoke()
            }
            true
        }
        holder.binding.ivImageReceive.setOnLongClickListener{
            if (!chat.messageType.equals("SMS", true)) {
                setSelectedItem(position)
                onMessageSelected.invoke()
            }
            true
        }

        holder.binding.clChatSent.setOnLongClickListener {
            if (chat.messageType.equals("SMS", true)) {
                setSelectedItem(position)
                onCopyMessage.invoke(chat)
                onMessageSelected.invoke()
            }
            true
        }

        holder.binding.clChatReceive.setOnLongClickListener {
            if (chat.messageType.equals("SMS", true)) {
                setSelectedItem(position)
                onMessageSelected()
                onCopyMessage.invoke(chat)
            }
            true
        }
    }

    override fun getItemCount(): Int {
        return chatConversation.size
    }
    fun markDeleted(ids: Set<Int>) {
        deletedIds = ids
    }
    fun replaceAll(list: List<ChatConversation>) {
        selectedPosition = -1
        chatConversation = list
        notifyDataSetChanged()
    }

    fun addChatList(list: List<ChatConversation>) {
        selectedPosition = -1
        chatConversation = emptyList()
        chatConversation = list.filter { it.id !in deletedIds }
        notifyDataSetChanged()
    }

    fun clearChatList() {
        chatConversation = emptyList()
        notifyDataSetChanged()
    }
    fun getSelectedChat(): ChatConversation? {
        return if (selectedPosition in chatConversation.indices) {
            chatConversation[selectedPosition]
        } else null
    }

    fun clearSelection() {
        val prevPos = selectedPosition
        selectedPosition = -1
        if (prevPos != -1) notifyItemChanged(prevPos)
    }

    fun setSelectedItem(pos: Int) {
        val prevPos = selectedPosition
        selectedPosition = pos
        if (prevPos != -1) notifyItemChanged(prevPos)
        notifyItemChanged(pos)
    }

    fun removeSelectedItem() {
        if (selectedPosition != -1) {
            val mutableList = chatConversation.toMutableList()
            mutableList.removeAt(selectedPosition)
            chatConversation = mutableList
            notifyItemRemoved(selectedPosition)
            selectedPosition = -1
        }
    }
//fun removeSelectedItem(id: Int) {
//    val mutableList = chatConversation.toMutableList()
//    val index = mutableList.indexOfFirst { it.id == id }
//    if (index != -1) {
//        mutableList.removeAt(index)
//        chatConversation = mutableList
//        notifyItemRemoved(index)
//        selectedPosition = -1
//    } else {
//        Logger.e(TAG, "Message ID $id not found for deletion")
//    }
//}

}



viewModel.getChatListDataLocal.observe(this) { chatData ->
            if (chatData != null) {
                if (chatData.isNotEmpty()) {
//                    lastDeletedId?.let { deletedId ->
//                        chatConversationList.removeAll { it.id == deletedId }
//                    }
                    val tempList = chatData.filter { cd ->
                        !chatConversationList.any { ccd ->
                            ccd.id == cd.id
                        }
                    }
                    if (tempList.isNotEmpty()) {
                        chatConversationList.addAll(tempList)
                        chatConversationList.sortByDescending { cc -> cc.id }
                        Logger.e(TAG, "android 5 580 chatConversationList $chatConversationList")
                        chatConversationAdapter.addChatList(chatConversationList)
                        Handler(Looper.getMainLooper()).postDelayed({
                            val position = chatConversationList.size
                            binding.rvChatConversation.smoothScrollToPosition(0)
                        }, 700)
                    }
                }
                viewModel.clearLocalResponse()
                viewModel.getChatForTheFirstTime(Prefs.phoneNumber, destinationNumber)
            }
        }

        viewModel.getChatForTheFirstTimeError.observe(this) {
            if (!it.isNullOrEmpty()) {
                showToast(this, it)
                viewModel.clearFirstChatApiData()
            }
        }

        viewModel.getChatForFirstTimeSuccess.observe(this) { chatData ->
            if (chatData != null) {
                totalPages = chatData.pagination.totalPage
                page = chatData.pagination.currentPage
//                lastDeletedId?.let { deletedId ->
//                    chatConversationList.removeAll { it.id == deletedId }
//                }
                if (chatConversationList.isNotEmpty()) {
                    val tempList = chatData.conversation.filter { cd ->
                        !chatConversationList.any { ccd ->
                            ccd.id == cd.id
                        }
                    }
                    if (tempList.isNotEmpty()) {
                        chatConversationList.addAll(tempList)
                        chatConversationList.sortByDescending { cc -> cc.id }
                        Logger.e(TAG, "android 5 606 chatConversationList $chatConversationList")
                        chatConversationAdapter.addChatList(chatConversationList)
                        Handler(Looper.getMainLooper()).postDelayed({
                            val position = chatConversationList.size
                            binding.rvChatConversation.smoothScrollToPosition(0)
                        }, 700)
                    }
                } else {
                    chatConversationList.addAll(chatData.conversation)
                    chatConversationList.sortByDescending { cc -> cc.id }
                    Logger.e(TAG, "android 5 615 chatConversationList $chatConversationList")
                    chatConversationAdapter.addChatList(chatConversationList)
                    Handler(Looper.getMainLooper()).postDelayed({
                        val position = chatConversationList.size
                        binding.rvChatConversation.smoothScrollToPosition(0)
                    }, 700)
                }
                viewModel.clearFirstChatApiData()
            }
        }

        viewModel.getChatOnScrollSuccess.observe(this) { chatData ->
            if (chatData != null) {
                totalPages = chatData.pagination.totalPage
                page = chatData.pagination.currentPage
//                lastDeletedId?.let { deletedId ->
//                    chatConversationList.removeAll { it.id == deletedId }
//                }
                val tempList = chatData.conversation.filter { cd ->
                    !chatConversationList.any { ccd ->
                        ccd.id == cd.id
                    }
                }
                if (tempList.isNotEmpty()) {
                    chatConversationList.addAll(tempList)
                    chatConversationList.sortByDescending { cc -> cc.id }
                    Logger.e(TAG, "android 5 637 chatConversationList $chatConversationList")
                    chatConversationAdapter.addChatList(chatConversationList)
                    Handler(Looper.getMainLooper()).postDelayed({
                        val position = chatConversationList.size
                        binding.rvChatConversation.smoothScrollToPosition(0)
                    }, 700)
                }

                viewModel.clearScrollChatApiData()
            }
        }

        viewModel.getChatLopperSuccess.observe(this) { chatData ->
            if (chatData != null) {
                totalPages = chatData.pagination.totalPage
                page = chatData.pagination.currentPage
//                lastDeletedId?.let { deletedId ->
//                    chatConversationList.removeAll { it.id == deletedId }
//                }
                val tempList = chatData.conversation.filter { cd ->
                    !chatConversationList.any { ccd ->
                        ccd.id == cd.id
                    }
                }
                if (tempList.isNotEmpty()) {
                    chatConversationList.addAll(tempList)
                    chatConversationList.sortByDescending { cc -> cc.id }
                    Logger.e(TAG, "android 5 660 chatConversationList $chatConversationList")
                    chatConversationAdapter.addChatList(chatConversationList)
                    Handler(Looper.getMainLooper()).postDelayed({
                        val position = chatConversationList.size
                        binding.rvChatConversation.smoothScrollToPosition(0)
                    }, 700)
                }

                viewModel.clearLooperChatApiData()
            }
        }

        viewModel.getSentChatError.observe(this) {
            if (it.isNotEmpty()) {
                handler.post(runnable)
                showToast(this, it)
                viewModel.clearChatSentError()
                Logger.e(TAG, "error : $it")
                binding.ivSendMsg.isClickable = true
            }
        }
        /*region message send success android8*/
        viewModel.sentChatSuccess.observe(this) {
            if (it != null) {
                binding.ivSendMsg.isClickable = true
                viewModel.clearChatSentError()
                Logger.e(TAG, "message send success : $it")
            }
        }
        /*endregion*/
        viewModel.getLastInsertedChat.observe(this) { chatData ->
            if (!chatData.isNullOrEmpty()) {

                val freshList = chatData
                    .filter { it.id !in deletedIds }

                val tempList = chatData.filter { cd ->
                    !chatConversationList.any { ccd ->
                        ccd.id == cd.id
                    }
                }
                Logger.e(TAG,"chat list 1 : $tempList")
                if (tempList.isNotEmpty()) {
                    chatConversationList.addAll(tempList)
                    Logger.e(TAG,"chat list  : $tempList")
                    chatConversationList.sortByDescending { cc -> cc.id }


                    chatConversationAdapter.markDeleted(deletedIds)
                    chatConversationAdapter.replaceAll(freshList)
                    Logger.e(TAG, "android 5 689 chatConversationList $chatConversationList")
                    chatConversationAdapter.addChatList(chatConversationList)
                    Logger.e(TAG, "android 5 689 1 chatConversationList $chatConversationList")

                    Handler(Looper.getMainLooper()).postDelayed({
                        val position = chatConversationList.size
                        binding.rvChatConversation.smoothScrollToPosition(0)
                    }, 700)
                }
                viewModel.clearLastInsertedChat()
                handler.post(runnable)
            }
        }

 binding.ivDeleteMsg.setOnClickListener {
            val selectedChat = chatConversationAdapter.getSelectedChat()
            Logger.e(TAG, "Selectedchat : $selectedChat")
            selectedChat?.let { chat ->
                showAlertDialog(
                    this,
                    R.string.dlg_chat_message_delete_title,
                    R.string.dlg_chat_msg_delete_desc,
                    R.string.dlg_chat_delete_btn_yes,
                    R.string.dlg_chat_delete_btn_no,
                    {
                        Logger.e(TAG, "Chat id : ${chat.id}")
                        if (chat.id != null) {
                            viewModel.deleteChatMessage(chat.id)
                            deletedIds.add(chat.id)
                        }
                    },
                    {
                        it.setOnDismissListener(object : DialogInterface.OnDismissListener {
                            override fun onDismiss(dialog: DialogInterface?) {
                                dialog?.dismiss()
                            }
                        })
                    })
            }
        }
    }
